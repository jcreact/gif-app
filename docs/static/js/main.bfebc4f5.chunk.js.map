{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","components/Spinner.jsx","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","category","setCategory","onSubmit","evt","preventDefault","trim","cats","handleSubmit","className","type","value","onChange","target","handleChange","GifGridItem","url","title","username","src","alt","defaultProps","Spinner","style","width","height","role","getGifs","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifApp","list","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"6LAYaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAwBA,OACI,mCACI,sBAAMC,SAAU,SAACC,GAAD,OAVH,SAACA,GAClBA,EAAIC,iBACAJ,GAAYA,EAASK,SACrBP,GAAc,SAACQ,GAAD,OAAWN,GAAX,mBAAwBM,OACtCL,EAAY,KAMaM,CAAaJ,IAAMK,UAAU,OAAtD,SACI,uBACIA,UAAU,eACVC,KAAK,OACLC,MAAOV,EACPW,SAAU,SAACR,GAAD,OAxBL,SAACA,GAClBF,EAAYE,EAAIS,OAAOF,OAuBQG,CAAaV,W,QC9BvCW,EAAc,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtC,OACI,yBAAST,UAAU,wCAAnB,SACI,sBAAKA,UAAU,aAAf,UACI,qBAAKU,IAAKH,EAAKI,IAAKH,EAAOR,UAAU,sBACrC,yBAASA,UAAU,YAAnB,SACI,4BAAIQ,MAER,yBAASR,UAAU,cAAnB,SACI,wBAAOA,UAAU,aAAjB,oBAAsCS,aAe1DH,EAAYM,aAAe,CACvBH,SAAU,eCrCP,IAAMI,EAAU,WACnB,OACI,qBAAKb,UAAU,4EAAf,SACI,qBACIA,UAAU,8BACVc,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,KAAK,SAHT,SAKI,sBAAMjB,UAAU,iB,uBCAnBkB,EAAO,uCAAG,WAAO1B,GAAP,uBAAA2B,EAAA,4DACJ,mCACTZ,EAFa,iDAEmCa,UAAU5B,GAF7C,6BACJ,oCADI,SAGA6B,MAAMd,GAHN,cAGbe,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRpB,MAAOmB,EAAInB,MACXD,IAAG,UAAEoB,EAAIE,cAAN,aAAE,EAAYC,UAAUvB,IAC3BE,UAAa,OAAHkB,QAAG,IAAHA,OAAA,EAAAA,EAAKlB,WAAY,kBAXhB,kBAcZgB,GAdY,4CAAH,sDCAPM,EAAU,SAAC,GAAkB,IAAhBvC,EAAe,EAAfA,SACtB,ECPwB,SAACA,GAEzB,MAA0BD,mBAAS,CAC/BiC,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,kBACNjB,EAAQ1B,GACH4C,MAAK,SAAAX,GAAI,OACNS,EAAS,CACLV,KAAMC,EACNO,SAAS,SAGnB,CAACxC,IAGAyC,EDX2BI,CAAa7C,GAAjCqC,EAAd,EAAQL,KAAcQ,EAAtB,EAAsBA,QAKtB,OACI,qCACI,oBAAIhC,UAAU,oCAAd,SAAmDR,IAClDwC,GAAW,cAAC,EAAD,IACZ,qBAAKhC,UAAU,sCAAf,SANJ6B,EAAOH,KAAI,SAACC,GAAD,OAAS,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEErCU,EAAS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAErB,EAAoChD,mBAASgD,GAA7C,mBAAOC,EAAP,KAAmBlD,EAAnB,KAEA,OACI,qCACI,oBAAIU,UAAU,OAAd,qBACA,cAAC,EAAD,CAAaV,cAAeA,IAC5B,uBAEIkD,EAAWd,KAAI,SAAAe,GAAG,OAAI,cAAC,EAAD,CAAmBjD,SAAUiD,GAAfA,UAYpDH,EAAO1B,aAAe,CAClB2B,KAAM,CAAC,gBChCXG,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bfebc4f5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Formulario (con un input) para agregar una nueva categoría a la lista.\n *\n * @param {React.Dispatch<React.SetStateAction<string[]>>} props.setCategories función para agregar nuevas categorías.\n * @returns {JSX.Element} Renderización HTML del componente.\n *\n * @author José Palma\n * @version 1.0.0\n */\nexport const AddCategory = ({ setCategories }) => {\n    const [category, setCategory] = useState('');\n\n    /**\n     * Maneja el evento 'onChange' del 'input'.\n     *\n     * @param {React.ChangeEvent<HTMLInputElement>} evt Evento OnChange del Input.\n     */\n    const handleChange = (evt) => {\n        setCategory(evt.target.value);\n    };\n\n    /**\n     * Maneja el evento 'onSubmit' del formulario.\n     *\n     * @param {React.FormEvent<HTMLFormElement>} evt Evento OnSubmit del formulario.\n     */\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        if (category && category.trim()) {\n            setCategories((cats) => [category, ...cats]);\n            setCategory('');\n        }\n    };\n\n    return (\n        <>\n            <form onSubmit={(evt) => handleSubmit(evt)} className=\"mt-3\">\n                <input\n                    className=\"form-control\"\n                    type=\"text\"\n                    value={category}\n                    onChange={(evt) => handleChange(evt)}\n                />\n            </form>\n        </>\n    );\n};\n\n// Especificación de tipos de las propiedades.\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Tarjeta para muestrar un gif.\n *\n * @param {string} props.url Es la URL de la imagen o gif (requerido).\n * @param {string} props.title Es el título de la imagen o gif (requerido).\n * @param {string} props.username Es el creador de la imagen o gif.\n * @returns {JSX.Element} Renderización HTML del componente.\n *\n * @author José Palma\n * @version 1.0.0\n */\nexport const GifGridItem = ({ url, title, username }) => {\n    return (\n        <article className=\"col animate__animated animate__fadeIn\">\n            <div className=\"card h-100\">\n                <img src={url} alt={title} className=\"card-card-img-top\" />\n                <section className=\"card-body\">\n                    <p>{title}</p>\n                </section>\n                <section className=\"card-footer\">\n                    <small className=\"text-muted\">Autor: {username}</small>\n                </section>\n            </div>\n        </article>\n    );\n};\n\n// Especificación de tipos de las propiedades.\nGifGridItem.propTypes = {\n    url: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    username: PropTypes.string,\n};\n\n// Valor por defecto de las propiedades.\nGifGridItem.defaultProps = {\n    username: 'Desconocido',\n};\n","import React from 'react';\n\nexport const Spinner = () => {\n    return (\n        <div className=\"d-flex justify-content-center mt-3 mb-3 animate__animated animate__fadeIn\">\n            <div\n                className=\"spinner-border text-primary\"\n                style={{ width: '4rem', height: '4rem' }}\n                role=\"status\"\n            >\n                <span className=\"sr-only\" />\n            </div>\n        </div>\n    );\n};\n","\n/**\n * Busca gifs relacionado a una categoria (texto).\n * \n * @param {string} category Es la categoría para buscar gifs.\n * @returns {object[]} Un arreglo de gifs.\n * \n * @author José Palma\n * @version 1.0.0\n */\nexport const getGifs = async (category) => {\n    const apiKey = 'DLJNUu7JpsE2JItElblNcv9SGN4pD4v9';\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map((img) => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized.url,\n            username: img?.username || 'Desconocido',\n        };\n    });\n    return gifs;\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Componentes\nimport { GifGridItem } from './GifGridItem.jsx';\nimport { Spinner } from './Spinner.jsx';\n\n// Custom Hooks\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n    const { data: images, loading } = useFetchGifs(category);\n\n    const showImages = () =>\n        images.map((img) => <GifGridItem key={img.id} {...img} />);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            {loading && <Spinner />}\n            <div className=\"row row-cols-sm-2 row-cols-lg-4 g-4\">\n                {showImages()}\n            </div>\n        </>\n    );\n};\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\n\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() =>\n        getGifs(category)\n            .then(gifs =>\n                setState({\n                    data: gifs,\n                    loading: false\n                })\n            )\n        , [category]\n    );\n\n    return state;\n};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n// Componentes\nimport { AddCategory } from './components/AddCategory.jsx';\nimport { GifGrid } from './components/GifGrid.jsx';\n\n/**\n * Componente principal de la aplicación.\n * \n * @param {string[]} props.list Una lista de categorías iniciales. \n * @returns {JSX.Element} Renderización HTML del componente.\n *\n * @author José Palma\n * @version 1.0.0\n */\nexport const GifApp = ({ list }) => {\n\n    const [categories, setCategories] = useState(list);\n\n    return (\n        <>\n            <h2 className=\"mt-3\">Gif App</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            {\n                categories.map(cat => <GifGrid key={cat} category={cat} />)\n            }\n        </>\n    );\n};\n\n// Especificación de tipos de las propiedades.\nGifApp.propTypes = {\n    list: PropTypes.arrayOf(PropTypes.string)\n};\n\n// Valor por defecto de las propiedades.\nGifApp.defaultProps = {\n    list: ['Dragon Ball']\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { GifApp } from './GifApp';\n\n\nReactDOM.render(\n    <GifApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}